cmake_minimum_required (VERSION 2.6)
list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)
project (FK)

message (STATUS "Configuring FK code")

# begin :: C++11 check
set(CMAKE_CXX_FLAGS "-Wall -std=c++11")
if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
    execute_process(
        COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
    if (NOT (GCC_VERSION VERSION_GREATER 4.7 OR GCC_VERSION VERSION_EQUAL 4.7))
        message(FATAL_ERROR "${PROJECT_NAME} requires g++ 4.7 or greater.")
    endif ()
elseif ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
else ()
    message(FATAL_ERROR "Your C++ compiler does not support C++11.")
endif ()
#end :: C++11 check

set(DOXYFILE_SOURCE_DIR "./src")
include(UseDoxygen)

#find_package (Boost COMPONENTS python)
#find_package (HDF5 COMPONENTS CXX)
find_package (Eigen3 3.1)

#message(STATUS "Boost includes: " ${Boost_INCLUDE_DIRS} )
message(STATUS "Eigen3 includes: " ${EIGEN3_INCLUDE_DIR} )
#message(STATUS "Boost libs: " ${Boost_LIBRARIES} )
#message(STATUS "HDF5 libs: " ${HDF5_LIBRARIES} )

include_directories(
#    ${Boost_INCLUDE_DIRS}
#    ${HDF5_INCLUDE_DIR}
    ${EIGEN3_INCLUDE_DIR}
#    ${PYTHON_INCLUDE_DIRS}
    ./jsoncpp/include
    ./src
)

add_subdirectory(src)
#add_subdirectory(tests)
add_subdirectory(prog)
#enable_testing()

